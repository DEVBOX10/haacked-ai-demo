@using Haack.AIDemoWeb.Library.Clients
@using Haack.AIDemoWeb.Library
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavigationManager

<div class="max-w-sm mx-auto">
    <div class="flex flex-row justify-between items-center py-2">
        <p class="text-md text-white bg-blue-500 px-2 py-1 font-semibold animate-pulse">
            @AssistantName
        </p>
    </div>
    <div class="bg-white border border-gray-200 rounded-lg shadow relative">
        <div class="border-b-2 border-b-gray-200 py-3 px-6 flex flex-row justify-between items-center">
            <div class="flex flex-row items-center space-x-1.5">
                <Avatar Username="@Username" />
                <div class="flex flex-col">
                    <p class="text-xs text-gray-600">@Username</p>
                    <p class="text-xs text-gray-400">@_messages.Count.ToQuantity("message")</p>
                </div>
            </div>
            <div class="space-x-1">
            </div>
        </div>
        <div class="max-h-96 h-96 px-6 py-1 overflow-auto">
            @foreach (var message in _messages) {
                <div class="py-2 flex flex-row w-full @(message.IsUser ? "justify-end" : "justify-start")">
                    <div class="@(message.IsUser ? "order-2" : "order-1")">
                        <Avatar Username="@(message.IsUser ? Username : null)" />
                    </div>
                    <div class="px-2 w-fit py-3 flex flex-col rounded-lg text-white @(message.IsUser ? "order-1 mr-2 bg-blue-500" : "order-2 ml-2 bg-green-500")">
                        <span class="text-xs text-gray-200">
                            @message.Author &nbsp;-&nbsp;
                            @message.Created.ToLocalTime()
                        </span>
                        <span class="text-md">@message.Text</span>
                    </div>
                </div>
            }
        </div>
        <div class="px-6 py-3 bg-white w-100 overflow-hidden rounded-bl-xl rounded-br-xla">
            <form @onsubmit="SubmitForm" class="flex flex-row items-center space-x-5">
                <div class="relative w-full">
                    <input
                        type="text"
                        @bind="@_currentMessage"
                        name="message"
                        class="w-full block p-1.5 text-sm text-gray-900 border border-gray-300 rounded-lg bg-white focus:ring-1 focus:ring-blue-500 focus:border-blue-500"/>
                </div>
                <button
                    class="px-3 py-2 text-xs font-medium text-center text-white bg-blue-500 rounded-lg hover:bg-purple-800 focus:ring-4 focus:outline-none focus:ring-blue-300 disabled:opacity-50">
                    Send
                </button>
            </form>
        </div>
    </div>
</div>

@code {
    readonly List<BlazorMessage> _messages  = new()
    {
        new BlazorMessage("Hi, Iâ€™m the bot. How can I help you?", "The Bot", false, DateTime.Now.AddMinutes(-1)),
    };
    string? _currentMessage;
    private string? _hubUrl;
    HubConnection? _hubConnection;

    [Parameter]
    public string? AssistantName { get; set; }

    [Parameter]
    public string? Username { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var baseUrl = NavigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + "/assistant-hub";

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .WithAutomaticReconnect()
                .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            _currentMessage = $"ERROR: Failed to start chat client: {e.Message}";
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        var isUser = name.Equals(Username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new BlazorMessage(message, name, isUser, DateTime.Now));

        // Inform blazor the UI needs updating
        InvokeAsync(StateHasChanged);
    }

    private async Task DisconnectAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();
        }

        _hubConnection = null;
    }

    private async Task SendAsync(string message)
    {
        if (!string.IsNullOrWhiteSpace(message) && _hubConnection is not null)
        {
            await _hubConnection.SendAsync("Broadcast", Username, message);

            _currentMessage = string.Empty;
        }
    }

    async Task SubmitForm()
    {
        if (_currentMessage is not null)
        {
            await SendAsync(_currentMessage);
        }
    }
}